# -*- coding: utf-8 -*-
"""Project_part_4_Feature_importance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16NXC9dTHgHAPJSNg1yLN3Kpur1n8WGcY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier

def load_data(filepath):
    """
    Load the dataset from an Excel file.

    Parameters:
    filepath (str): The path to the Excel file.

    Returns:
    pd.DataFrame: The loaded dataset.
    """
    return pd.read_excel(filepath)

def preprocess_data(data):
    """
    Separate features and target variable, and normalize the features.

    Parameters:
    data (pd.DataFrame): The dataset.

    Returns:
    tuple: Scaled training and test features, training and test target variables.
    """
    # Separate features and target variable
    X = data.drop('is_adhd', axis=1)  # Features
    y = data['is_adhd']  # Target variable

    # Initial train/test split
    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=42, stratify=y)

    # Normalize numerical features
    scaler = StandardScaler()
    X_train_scaled = scaler.fit_transform(X_train)
    X_test_scaled = scaler.transform(X_test)

    return X_train_scaled, X_test_scaled, y_train, y_test

def train_random_forest(X_train, y_train):
    """
    Train a Random Forest model.

    Parameters:
    X_train (np.array): Scaled training features.
    y_train (pd.Series): Training target variable.

    Returns:
    RandomForestClassifier: The trained Random Forest model.
    """
    rf = RandomForestClassifier(random_state=42)
    rf.fit(X_train, y_train)
    return rf

def plot_feature_importance(rf, feature_names):
    """
    Plot the feature importance from the trained Random Forest model.

    Parameters:
    rf (RandomForestClassifier): The trained Random Forest model.
    feature_names (pd.Index): The feature names.
    """
    feature_importances = rf.feature_importances_
    importance_df = pd.DataFrame(
        {'Feature': feature_names, 'Importance': feature_importances})
    importance_df = importance_df.sort_values(by='Importance', ascending=False)

    # Number the features for plotting
    importance_df['Feature_Number'] = range(1, len(importance_df) + 1)

    print("Feature Importances from Random Forest:")
    print(importance_df)

    # Plotting feature importance with numbered features
    plt.figure(figsize=(10, 8))
    plt.barh(importance_df['Feature_Number'], importance_df['Importance'])
    plt.xlabel('Importance')
    plt.ylabel('Feature Number')
    plt.title('Feature Importance from Random Forest')
    plt.gca().invert_yaxis()

    # Add a text box with feature names and their corresponding numbers
    textstr = '\n'.join(
        [f"{num}. {name}" for num, name in
         zip(importance_df['Feature_Number'], importance_df['Feature'])])
    props = dict(boxstyle='round', facecolor='wheat', alpha=0.5)
    plt.gcf().text(0.95, 0.5, textstr, fontsize=10, verticalalignment='center',
                   bbox=props)

    plt.show()

def main():
    """
    Main function to load data, preprocess, train the model, and plot feature
    importance.
    """
    # Load the dataset
    filepath = '/content/drive/MyDrive/Project_ADHD/student_data_ADHD.xlsx'
    data = load_data(filepath)

    # Preprocess the data
    X_train_scaled, X_test_scaled, y_train, y_test = preprocess_data(data)

    # Train a Random Forest model
    rf = train_random_forest(X_train_scaled, y_train)

    # Plot feature importance
    plot_feature_importance(rf, data.columns.drop('is_adhd'))

if __name__ == '__main__':
    main()